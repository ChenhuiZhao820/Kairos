import React, { useState } from 'react';
import { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Plus, X } from 'lucide-react';

const EnergyAssessment = ({ onComplete }) => {
  const [step, setStep] = useState(0);
  const [answers, setAnswers] = useState({
    sleepQuality: null,
    morningFeeling: null,
    workload: null,
    importantTask: null
  });

  const questions = [
    {
      id: 'sleepQuality',
      text: '昨晚的睡眠质量如何？',
      options: [
        { value: 3, text: '很好（7-8小时优质睡眠）' },
        { value: 2, text: '一般（6-7小时睡眠）' },
        { value: 1, text: '较差（睡眠不足或质量差）' }
      ]
    },
    {
      id: 'morningFeeling',
      text: '早上起床时感觉如何？',
      options: [
        { value: 3, text: '精力充沛' },
        { value: 2, text: '状态一般' },
        { value: 1, text: '比较疲惫' }
      ]
    },
    {
      id: 'workload',
      text: '今天的工作/学习压力如何？',
      options: [
        { value: 3, text: '压力较小' },
        { value: 2, text: '压力适中' },
        { value: 1, text: '压力较大' }
      ]
    },
    {
      id: 'importantTask',
      text: '今天是否有重要任务？',
      options: [
        { value: 3, text: '没有特别重要的任务' },
        { value: 2, text: '有一些重要事项，但不紧急' },
        { value: 1, text: '有重要且紧急的任务' }
      ]
    }
  ];

  const handleAnswer = (questionId, value) => {
    const newAnswers = {
      ...answers,
      [questionId]: value
    };
    setAnswers(newAnswers);
    
    if (step < questions.length - 1) {
      setStep(step + 1);
    } else {
      // 计算建议的精力值
      const total = Object.values(newAnswers).reduce((sum, val) => sum + (val || 0), 0);
      const suggestedEnergy = Math.round(10 + (total / (questions.length * 3)) * 5);
      onComplete(suggestedEnergy);
    }
  };

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="text-lg font-medium">{questions[step].text}</h3>
        <div className="space-y-2">
          {questions[step].options.map((option) => (
            <button
              key={option.value}
              onClick={() => handleAnswer(questions[step].id, option.value)}
              className="w-full text-left p-3 rounded border hover:bg-gray-50 transition-colors"
            >
              {option.text}
            </button>
          ))}
        </div>
      </div>
      <div className="text-sm text-gray-500">
        问题 {step + 1} / {questions.length}
      </div>
    </div>
  );
};

const SchedulePlanner = () => {
  const [events, setEvents] = useState([]);
  const [newEvent, setNewEvent] = useState({
    name: '',
    size: 'trivial',
    energy: '0',
    timeWindow: 'anytime',
    afterMeal: false,
  });
  const [scheduledEvents, setScheduledEvents] = useState([]);
  const [totalEnergy, setTotalEnergy] = useState(null);
  const [showAssessment, setShowAssessment] = useState(true);
  const [manualEnergyInput, setManualEnergyInput] = useState(false);
  
  const sizeMap = {
    trivial: 15,
    small: 30,
    middle: 90,
    large: 120
  };
  
  const timeWindows = [
    { value: 'anytime', label: '任意时间' },
    { value: 'morning-meal', label: ' 8:00-10:00' },
    { value: 'lunch-meal', label: '12:00-14:00' },
    { value: 'dinner-meal', label: '18:00-20:00' },
    { value: 'morning', label: '8:00-12:00' },
    { value: 'afternoon', label: '14:00-18:00' },
    { value: 'evening', label: '20:00-22:00' }
  ];

  const sizeOptions = [
    { value: 'trivial', label: '随时可插入' },
    { value: 'small', label: '小型 (<= 30分钟)' },
    { value: 'middle', label: '中型 (<= 120分钟)' },
    { value: 'large', label: '大型 (120分钟+)' }
  ];
  
  const energyOptions = [
    { value: '0', label: '无消耗' },
    { value: '1', label: '低消耗' },
    { value: '2', label: '中等消耗' },
    { value: '3', label: '高消耗' }
  ];

  const handleEnergyAssessmentComplete = (suggestedEnergy) => {
    setTotalEnergy(suggestedEnergy);
    setShowAssessment(false);
  };

  const handleManualEnergyInput = (value) => {
    const energy = Math.max(10, Math.min(15, parseInt(value) || 13));
    setTotalEnergy(energy);
    setShowAssessment(false);
  };

  const calculateStartupDifficulty = (prevEnergy, nextEnergy) => {
    const energyGap = nextEnergy - prevEnergy;
    return energyGap > 1 ? energyGap - 1 : 0;
  };

  const isTimeWindowValid = (event, timeSlot) => {
    if (event.timeWindow === 'anytime') return true;
    
    const hour = parseInt(timeSlot.split(':')[0]);
    
    switch (event.timeWindow) {
      case 'morning-meal': return hour >= 8 && hour < 10;
      case 'lunch-meal': return hour >= 12 && hour < 14;
      case 'dinner-meal': return hour >= 18 && hour < 20;
      case 'morning': return hour >= 8 && hour < 12;
      case 'afternoon': return hour >= 14 && hour < 18;
      case 'evening': return hour >= 20 && hour < 22;
      default: return true;
    }
  };

  const generateSchedule = () => {
    let schedule = [];
    let currentTime = 8 * 60; // 从早上8点开始
    let remainingEnergy = totalEnergy;
    let lastMealTime = null;
    let lastEventEnergy = 0;
    
    // 首先安排固定时间的餐饭
    const meals = events.filter(event => 
      ['morning-meal', 'lunch-meal', 'dinner-meal'].includes(event.timeWindow)
    );
    
    // 其他需要安排的事件
    const flexibleEvents = events.filter(event => 
      !['morning-meal', 'lunch-meal', 'dinner-meal'].includes(event.timeWindow)
    );

    // 按能量消耗和时间窗口排序
    const sortedEvents = [...flexibleEvents].sort((a, b) => {
      if (a.timeWindow === 'anytime' && b.timeWindow !== 'anytime') return 1;
      if (a.timeWindow !== 'anytime' && b.timeWindow === 'anytime') return -1;
      return parseInt(b.energy) - parseInt(a.energy);
    });

    while (currentTime < 22 * 60) { // 到晚上10点结束
      const currentHour = Math.floor(currentTime / 60);
      const timeSlot = `${currentHour}:${(currentTime % 60).toString().padStart(2, '0')}`;

      // 检查是否需要安排餐食
      const mealForThisTime = meals.find(meal => isTimeWindowValid(meal, timeSlot));
      
      if (mealForThisTime) {
        schedule.push({
          ...mealForThisTime,
          startTime: timeSlot
        });
        lastMealTime = currentTime;
        currentTime += sizeMap[mealForThisTime.size];
        remainingEnergy -= parseInt(mealForThisTime.energy);
        lastEventEnergy = parseInt(mealForThisTime.energy);
        continue;
      }

      // 尝试安排其他事件
      for (const event of sortedEvents) {
        if (schedule.find(s => s.id === event.id)) continue;
        
        const eventTime = sizeMap[event.size];
        const eventEnergy = parseInt(event.energy);
        const startupDifficulty = calculateStartupDifficulty(lastEventEnergy, eventEnergy);
        
        if (
          remainingEnergy >= (eventEnergy + startupDifficulty) &&
          isTimeWindowValid(event, timeSlot) &&
          (!event.afterMeal || (lastMealTime && (currentTime - lastMealTime >= 60)))
        ) {
          schedule.push({
            ...event,
            startTime: timeSlot,
            startupDifficulty: startupDifficulty
          });
          currentTime += eventTime;
          remainingEnergy -= (eventEnergy + startupDifficulty);
          lastEventEnergy = eventEnergy;
          break;
        }
      }
      
      currentTime += 15;
    }

    setScheduledEvents(schedule);
  };

  const addEvent = () => {
    if (newEvent.name.trim()) {
      setEvents([...events, { ...newEvent, id: Date.now() }]);
      setNewEvent({
        name: '',
        size: 'trivial',
        energy: '0',
        timeWindow: 'anytime',
        afterMeal: false
      });
    }
  };

  const removeEvent = (id) => {
    setEvents(events.filter(event => event.id !== id));
  };

  if (showAssessment) {
    return (
      <div className="w-full max-w-4xl mx-auto p-4">
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>设置今日精力值</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex gap-4 items-center">
                <Button
                  onClick={() => setManualEnergyInput(!manualEnergyInput)}
                  variant="outline"
                >
                  {manualEnergyInput ? '使用精力评估' : '手动设置精力值'}
                </Button>
              </div>
              
              {manualEnergyInput ? (
                <div className="space-y-2">
                  <p className="text-gray-600">请输入您估计的今日精力值 (10-15)：</p>
                  <div className="flex gap-4">
                    <Input
                      type="number"
                      min="10"
                      max="15"
                      defaultValue="13"
                      onChange={(e) => handleManualEnergyInput(e.target.value)}
                      className="w-32"
                    />
                    <Button onClick={() => setShowAssessment(false)}>
                      确认
                    </Button>
                  </div>
                </div>
              ) : (
                <EnergyAssessment onComplete={handleEnergyAssessmentComplete} />
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="w-full max-w-4xl mx-auto p-4">
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex justify-between items-center">
            <span>今日规划</span>
            <div className="text-sm font-normal flex items-center gap-4">
              <span>剩余精力值: {totalEnergy}</span>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setShowAssessment(true)}
              >
                重新评估
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-4">
            <Input
              placeholder="事件名称"
              value={newEvent.name}
              onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}
              className="flex-1"
            />
            <select
              value={newEvent.size}
              onChange={(e) => setNewEvent({ ...newEvent, size: e.target.value })}
              className="border rounded p-2"
            >
              {sizeOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            <select
              value={newEvent.energy}
              onChange={(e) => setNewEvent({ ...newEvent, energy: e.target.value })}
              className="border rounded p-2"
            >
              {energyOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            <select
              value={newEvent.timeWindow}
              onChange={(e) => setNewEvent({ ...newEvent, timeWindow: e.target.value })}
              className="border rounded p-2"
            >
              {timeWindows.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            <label className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={newEvent.afterMeal}
                onChange={(e) => setNewEvent({ ...newEvent, afterMeal: e.target.checked })}
              />
              需要在饭后
            </label>
            <Button onClick={addEvent} className="flex items-center gap-2">
              <Plus size={16} /> 添加
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>待安排事件列表</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {events.map(event => (
              <div key={event.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                <span>{event.name}</span>
                <div className="flex items-center gap-4">
                  <span className="text-sm text-gray-600">
                    {timeWindows.find(o => o.value === event.timeWindow)?.label}
                  </span>
                  <span className="text-sm text-gray-600">
                    {sizeOptions.find(o => o.value === event.size)?.label}
                  </span>
                  <span className="text-sm text-gray-600">
                    能量消耗: {event.energy}
                  </span>
                  {event.afterMeal && (
                    <span className="text-sm text-gray-600">饭后进行</span>
                  )}
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={() => removeEvent(event.id)}
                  >
                    <X size={16} />
                  </Button>
                </div>
              </div>
            ))}
          </div>
          {events.length > 0 && (
            <Button 
              onClick={generateSchedule}
              className="mt-4"
            >
              生成日程安排
            </Button>
          )}
        </CardContent>
      </Card>

      {scheduledEvents.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>推荐日程安排</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {scheduledEvents.map((event, index) => (
                <div key={event.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <span className="font-medium">
                    {event.startTime} - {event.name}
                  </span>
                  <div className="flex items-center gap-4">
                    <span className="text-sm text-gray-600">
                      {sizeOptions.find(o => o.value === event.size)?.label}
                    </span>
                    <span className="text-sm text-gray-600">
                      能量消耗: {event.energy}
                      {event.startupDifficulty > 0 && ` (+${event.startupDifficulty}启动困难)`}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SchedulePlanner;
  );
};

export default SchedulePlanner;
